<?xml version="1.0" encoding="utf-8"?>
<topic id="957eb2dd-003b-4ca0-afa9-ad8bb561bd8d" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>The assemblies included with this package allow for manipulation of the Microsoft Windows Remote Access Service (RAS) system. All of the components exposed by this assembly are designed to integrate directly with Microsoft Visual Studio. You can use them from other editors, however the rich editing capabilities of Visual Studio will not be available. These components can be added to the toolbox and dragged onto your Windows Forms application, or dropped into your Windows Service with nothing more than a couple clicks of the mouse.</para>
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="WhichComponentsDoWhat">
      <title>Which components do what?</title>
      <content>
      	<para>One of the questions you might be asking yourself is, "well this is great, but what in this thing do I use for what?". Hopefully this question can be addressed here. Due to the number of objects in the project it may seem daunting trying to find which component you need to use when. The following components are available in all build types.</para>
      	<list class="bullet">
      	  <listItem><legacyBold>RasAutoDialManager</legacyBold> - This component interacts with the Windows RAS AutoDial manager.</listItem>
      	  <listItem><legacyBold>RasConnectionWatcher</legacyBold> - This component monitors the connections active on the machine, and is a unique feature of this project. You will not find this component available anywhere else!</listItem>
      	  <listItem><legacyBold>RasDialDialog</legacyBold> - This component displays a user interface to dial a connection.</listItem>
      	  <listItem><legacyBold>RasDialer</legacyBold> -  This component is designed to dial any type of connection that Windows can dial itself. However, custom VPN connections like the Cisco VPN system do not use Windows to dial the connection and therefore cannot be dialed from this project.</listItem>
      	  <listItem><legacyBold>RasEntryDialog</legacyBold> - This component displays a user interface to create or modify a phone book entry.</listItem>
      	  <listItem><legacyBold>RasPhoneBook</legacyBold> - This component is designed to manipulate the Windows phone books. Adding, removing, and modifying entries is done through this class. You can also modify credentials stored with the entry.</listItem>
      	  <listItem><legacyBold>RasPhoneBookDialog</legacyBold> - This component displays the primary dial-up networking dialog box.</listItem>
      	</list>
      	<para>The following components are available for WINXP and later build types.
      	<list class="bullet">
      		<listItem><legacyBold>CredentialPromptDialog</legacyBold> - This component provides a common user interface for requesting user credentials.</listItem>
      	</list>
      	</para>
      </content>
    </section>
    <section address="KnownLimitations">
    	<title>Known Limitations</title>
    	<content>
    		<list class="bullet">
    			<listItem>Windows Presentation Foundation (WPF)
    				<para>There are difficulties when using DotRas with WPF surrounding the marshalling of threads from the multi-threaded components. The ISynchronizeInvoke interface is not used in WPF, instead the Dispatcher type is used for marshalling threads. For help with using the components with WPF, see the DialingVpnEntry WPF example.</para>
    			</listItem>
    		</list>
    	</content>
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>